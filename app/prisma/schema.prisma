
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/social-media-manager/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String               @id @default(cuid())
  name              String?
  email             String?              @unique
  emailVerified     DateTime?
  image             String?
  twitterUsername   String?              @unique
  twitterId         String?              @unique
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  scheduledTweets   ScheduledTweet[]
  tweetAnalysis     TweetAnalysis[]
  profileOptimizer  ProfileOptimization[]
  settings          UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ScheduledTweet {
  id           String   @id @default(cuid())
  userId       String
  content      String   @db.Text
  scheduledFor DateTime
  isPosted     Boolean  @default(false)
  postedAt     DateTime?
  twitterTweetId String? @unique
  isThread     Boolean  @default(false)
  threadOrder  Int?
  parentTweetId String?
  metadata     Json?    // Store additional data like hashtags, mentions, etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, scheduledFor])
}

model TweetAnalysis {
  id             String   @id @default(cuid())
  userId         String   @unique  // Make userId unique so we can use upsert
  analyzedAt     DateTime @default(now())
  totalTweets    Int      @default(0)
  avgEngagement  Float?
  commonHashtags Json?    // Array of hashtag objects with frequency
  writingStyle   Json?    // Analyzed style characteristics
  topicAnalysis  Json?    // Common topics and themes
  sentimentScore Float?   // Overall sentiment analysis
  postingPattern Json?    // Optimal posting times and frequency
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, analyzedAt])
}

model ProfileOptimization {
  id               String   @id @default(cuid())
  userId           String
  suggestionType   String   // 'bio', 'posting_strategy', 'engagement_tips'
  title            String
  description      String   @db.Text
  isApplied        Boolean  @default(false)
  aiGenerated      Boolean  @default(true)
  priority         Int      @default(1) // 1-5 priority ranking
  createdAt        DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, suggestionType])
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  twitterApiKey         String?  // Placeholder for user's Twitter API credentials
  twitterApiSecret      String?
  twitterAccessToken    String?
  twitterTokenSecret    String?
  geminiApiKey          String?  // Placeholder for user's Gemini API key
  defaultTweetStyle     String   @default("professional") // 'casual', 'professional', 'humorous', etc.
  autoScheduleOptimal   Boolean  @default(true)
  notificationsEnabled  Boolean  @default(true)
  timezone              String   @default("UTC")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
